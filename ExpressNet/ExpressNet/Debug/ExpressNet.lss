
ExpressNet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000530  000005c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800102  00800102  000005c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009aa  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f9  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000401  00000000  00000000  00001803  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000139  00000000  00000000  00002127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2b c0       	rjmp	.+86     	; 0xc8 <__vector_28>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 34       	cpi	r26, 0x43	; 67
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	67 d0       	rcall	.+206    	; 0x192 <main>
  c4:	33 c2       	rjmp	.+1126   	; 0x52c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_28>:

volatile bool bMessageReady = false;
volatile uint8_t messageFromLinux[32];

ISR(USART1_RX_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
  d8:	0f 92       	push	r0
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	static uint8_t newMsg[32];
	static uint8_t* pNextByte = newMsg;
	*pNextByte++ = UDR1;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 102:	9c 01       	movw	r18, r24
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 10c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 110:	2e ec       	ldi	r18, 0xCE	; 206
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
	if(pNextByte - newMsg == newMsg[0])
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 124:	9c 01       	movw	r18, r24
 126:	83 e2       	ldi	r24, 0x23	; 35
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	28 1b       	sub	r18, r24
 12c:	39 0b       	sbc	r19, r25
 12e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZZ11__vector_28E6newMsg>
 132:	88 2f       	mov	r24, r24
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	28 17       	cp	r18, r24
 138:	39 07       	cpc	r19, r25
 13a:	99 f4       	brne	.+38     	; 0x162 <__vector_28+0x9a>
	{
		memcpy((void*)messageFromLinux, newMsg, newMsg[0]);
 13c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZZ11__vector_28E6newMsg>
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ac 01       	movw	r20, r24
 146:	63 e2       	ldi	r22, 0x23	; 35
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	e5 d1       	rcall	.+970    	; 0x51a <memcpy>
		bMessageReady = true;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		pNextByte = newMsg;
 156:	83 e2       	ldi	r24, 0x23	; 35
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
 162:	00 00       	nop
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 186:	0f 90       	pop	r0
 188:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <main>:

int main(void)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	ca 50       	subi	r28, 0x0A	; 10
 19c:	d1 40       	sbci	r29, 0x01	; 1
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
	//	initialization
	messageFromLinux[0] = 0x00;
 1a8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <messageFromLinux>
	
	//	PORTD Bit 7 used for RS485 Direction
	PORTD &= !0x80;
 1ac:	8b e2       	ldi	r24, 0x2B	; 43
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	80 81       	ld	r24, Z
 1b4:	8b e2       	ldi	r24, 0x2B	; 43
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	10 82       	st	Z, r1
	DDRD = 0x80;
 1bc:	8a e2       	ldi	r24, 0x2A	; 42
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	20 e8       	ldi	r18, 0x80	; 128
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
	
	//	USART0 used for RS485 comm
	UBRR0 = (F_CPU / ( 16 * RS485_BAUDRATE)) - 1;
 1c6:	84 ec       	ldi	r24, 0xC4	; 196
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	29 e0       	ldi	r18, 0x09	; 9
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	31 83       	std	Z+1, r19	; 0x01
 1d2:	20 83       	st	Z, r18
	UCSR0C = (0 << USBS0) | (3 << UCSZ00);
 1d4:	82 ec       	ldi	r24, 0xC2	; 194
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	26 e0       	ldi	r18, 0x06	; 6
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
	UCSR0B = (1 << UCSZ02) | (1 << RXEN0) | (1 << TXEN0);
 1de:	81 ec       	ldi	r24, 0xC1	; 193
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	2c e1       	ldi	r18, 0x1C	; 28
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
	
	//	USART1 used for Linux comm
	UBRR1 = (F_CPU / ( 16 * LINUX_BAUDRATE)) - 1;
 1e8:	8c ec       	ldi	r24, 0xCC	; 204
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	29 e0       	ldi	r18, 0x09	; 9
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	31 83       	std	Z+1, r19	; 0x01
 1f4:	20 83       	st	Z, r18
	UCSR1C = (0 << USBS1) | (3 << UCSZ10);
 1f6:	8a ec       	ldi	r24, 0xCA	; 202
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	26 e0       	ldi	r18, 0x06	; 6
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
	UCSR1B = (1 << RXEN1) | (1 << TXEN1 | 1 << RXCIE1);
 200:	89 ec       	ldi	r24, 0xC9	; 201
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	28 e9       	ldi	r18, 0x98	; 152
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
	
    uint8_t XPNAddress;
	uint8_t CallByte;
	uint8_t RxData[255];
	uint8_t* pRxData = RxData;
 20a:	ce 01       	movw	r24, r28
 20c:	0c 96       	adiw	r24, 0x0c	; 12
 20e:	9c 83       	std	Y+4, r25	; 0x04
 210:	8b 83       	std	Y+3, r24	; 0x03
	
	sei();
 212:	78 94       	sei
	
    while (1) 
    {
		for(XPNAddress = 1; XPNAddress < 32; XPNAddress++)
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	80 32       	cpi	r24, 0x20	; 32
 21c:	d8 f7       	brcc	.-10     	; 0x214 <main+0x82>
		{
			if (bMessageReady)
 21e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 222:	88 23       	and	r24, r24
 224:	09 f4       	brne	.+2      	; 0x228 <main+0x96>
 226:	6c c0       	rjmp	.+216    	; 0x300 <main+0x16e>
			{
				PORTD |= 0x80;
 228:	8b e2       	ldi	r24, 0x2B	; 43
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	2b e2       	ldi	r18, 0x2B	; 43
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	20 81       	ld	r18, Z
 234:	20 68       	ori	r18, 0x80	; 128
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
				for(uint8_t i = 1; i < messageFromLinux[0]; i++)
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	8d 83       	std	Y+5, r24	; 0x05
 23e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <messageFromLinux>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	9d 81       	ldd	r25, Y+5	; 0x05
 246:	92 17       	cp	r25, r18
 248:	08 f0       	brcs	.+2      	; 0x24c <main+0xba>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	88 23       	and	r24, r24
 24e:	b1 f1       	breq	.+108    	; 0x2bc <main+0x12a>
				{
					if(i == 1)
 250:	8d 81       	ldd	r24, Y+5	; 0x05
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	49 f4       	brne	.+18     	; 0x268 <main+0xd6>
					{
						UCSR0B |= (1 << TXB80);
 256:	81 ec       	ldi	r24, 0xC1	; 193
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	21 ec       	ldi	r18, 0xC1	; 193
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	f9 01       	movw	r30, r18
 260:	20 81       	ld	r18, Z
 262:	21 60       	ori	r18, 0x01	; 1
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
					}
					while(!(UCSR0A & (1 << UDRE0)));
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	80 81       	ld	r24, Z
 270:	88 2f       	mov	r24, r24
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	80 72       	andi	r24, 0x20	; 32
 276:	99 27       	eor	r25, r25
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	89 2b       	or	r24, r25
 27c:	09 f0       	breq	.+2      	; 0x280 <main+0xee>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	22 23       	and	r18, r18
 282:	09 f0       	breq	.+2      	; 0x286 <main+0xf4>
 284:	f1 cf       	rjmp	.-30     	; 0x268 <main+0xd6>
					UDR0 = messageFromLinux[i];
 286:	86 ec       	ldi	r24, 0xC6	; 198
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2d 81       	ldd	r18, Y+5	; 0x05
 28c:	22 2f       	mov	r18, r18
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	2d 5f       	subi	r18, 0xFD	; 253
 292:	3e 4f       	sbci	r19, 0xFE	; 254
 294:	f9 01       	movw	r30, r18
 296:	20 81       	ld	r18, Z
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
					if(i == 1)
 29c:	8d 81       	ldd	r24, Y+5	; 0x05
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	49 f4       	brne	.+18     	; 0x2b4 <main+0x122>
					{
						UCSR0B &= ~(1 << TXB80);
 2a2:	81 ec       	ldi	r24, 0xC1	; 193
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	21 ec       	ldi	r18, 0xC1	; 193
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	20 81       	ld	r18, Z
 2ae:	2e 7f       	andi	r18, 0xFE	; 254
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
		for(XPNAddress = 1; XPNAddress < 32; XPNAddress++)
		{
			if (bMessageReady)
			{
				PORTD |= 0x80;
				for(uint8_t i = 1; i < messageFromLinux[0]; i++)
 2b4:	8d 81       	ldd	r24, Y+5	; 0x05
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	8d 83       	std	Y+5, r24	; 0x05
 2ba:	c1 cf       	rjmp	.-126    	; 0x23e <main+0xac>
					if(i == 1)
					{
						UCSR0B &= ~(1 << TXB80);
					}
				}
				while(!(UCSR0A & (1 << TXC0)));
 2bc:	80 ec       	ldi	r24, 0xC0	; 192
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	fc 01       	movw	r30, r24
 2c2:	80 81       	ld	r24, Z
 2c4:	88 2f       	mov	r24, r24
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	80 74       	andi	r24, 0x40	; 64
 2ca:	99 27       	eor	r25, r25
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	89 2b       	or	r24, r25
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <main+0x142>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	22 23       	and	r18, r18
 2d6:	09 f0       	breq	.+2      	; 0x2da <main+0x148>
 2d8:	f1 cf       	rjmp	.-30     	; 0x2bc <main+0x12a>
				PORTD &= !0x80;
 2da:	8b e2       	ldi	r24, 0x2B	; 43
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	8b e2       	ldi	r24, 0x2B	; 43
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	10 82       	st	Z, r1
				UCSR0A |= (1 << TXC0);
 2ea:	80 ec       	ldi	r24, 0xC0	; 192
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	20 ec       	ldi	r18, 0xC0	; 192
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	f9 01       	movw	r30, r18
 2f4:	20 81       	ld	r18, Z
 2f6:	20 64       	ori	r18, 0x40	; 64
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
				bMessageReady = false;
 2fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			} 


			CallByte = 0x40 + XPNAddress;
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	80 5c       	subi	r24, 0xC0	; 192
 304:	8a 83       	std	Y+2, r24	; 0x02
			for(uint8_t x = 0x40; x!=0; x = x >> 1)
 306:	80 e4       	ldi	r24, 0x40	; 64
 308:	8e 83       	std	Y+6, r24	; 0x06
 30a:	8e 81       	ldd	r24, Y+6	; 0x06
 30c:	88 23       	and	r24, r24
 30e:	81 f0       	breq	.+32     	; 0x330 <main+0x19e>
			{
				if(CallByte & x)
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	8e 81       	ldd	r24, Y+6	; 0x06
 314:	89 23       	and	r24, r25
 316:	88 23       	and	r24, r24
 318:	21 f0       	breq	.+8      	; 0x322 <main+0x190>
				{
					CallByte ^= 0x80;
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	80 e8       	ldi	r24, 0x80	; 128
 31e:	89 27       	eor	r24, r25
 320:	8a 83       	std	Y+2, r24	; 0x02
				bMessageReady = false;
			} 


			CallByte = 0x40 + XPNAddress;
			for(uint8_t x = 0x40; x!=0; x = x >> 1)
 322:	8e 81       	ldd	r24, Y+6	; 0x06
 324:	88 2f       	mov	r24, r24
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	8e 83       	std	Y+6, r24	; 0x06
 32e:	ed cf       	rjmp	.-38     	; 0x30a <main+0x178>
				if(CallByte & x)
				{
					CallByte ^= 0x80;
				}
			}
			PORTD |= 0x80;
 330:	8b e2       	ldi	r24, 0x2B	; 43
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	2b e2       	ldi	r18, 0x2B	; 43
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	20 68       	ori	r18, 0x80	; 128
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
			while(!(UCSR0A & (1 << UDRE0)));
 342:	80 ec       	ldi	r24, 0xC0	; 192
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	fc 01       	movw	r30, r24
 348:	80 81       	ld	r24, Z
 34a:	88 2f       	mov	r24, r24
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	80 72       	andi	r24, 0x20	; 32
 350:	99 27       	eor	r25, r25
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	89 2b       	or	r24, r25
 356:	09 f0       	breq	.+2      	; 0x35a <main+0x1c8>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	22 23       	and	r18, r18
 35c:	09 f0       	breq	.+2      	; 0x360 <main+0x1ce>
 35e:	f1 cf       	rjmp	.-30     	; 0x342 <main+0x1b0>
			UCSR0B |= (1 << TXB80);
 360:	81 ec       	ldi	r24, 0xC1	; 193
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	21 ec       	ldi	r18, 0xC1	; 193
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	f9 01       	movw	r30, r18
 36a:	20 81       	ld	r18, Z
 36c:	21 60       	ori	r18, 0x01	; 1
 36e:	fc 01       	movw	r30, r24
 370:	20 83       	st	Z, r18
			UDR0 = CallByte;
 372:	86 ec       	ldi	r24, 0xC6	; 198
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	2a 81       	ldd	r18, Y+2	; 0x02
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
			while(!(UCSR0A & (1 << TXC0)));
 37c:	80 ec       	ldi	r24, 0xC0	; 192
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	88 2f       	mov	r24, r24
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	80 74       	andi	r24, 0x40	; 64
 38a:	99 27       	eor	r25, r25
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	89 2b       	or	r24, r25
 390:	09 f0       	breq	.+2      	; 0x394 <main+0x202>
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	22 23       	and	r18, r18
 396:	09 f0       	breq	.+2      	; 0x39a <main+0x208>
 398:	f1 cf       	rjmp	.-30     	; 0x37c <main+0x1ea>
			UCSR0B &= ~(1 << TXB80);
 39a:	81 ec       	ldi	r24, 0xC1	; 193
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	21 ec       	ldi	r18, 0xC1	; 193
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	f9 01       	movw	r30, r18
 3a4:	20 81       	ld	r18, Z
 3a6:	2e 7f       	andi	r18, 0xFE	; 254
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
			PORTD &= !0x80;
 3ac:	8b e2       	ldi	r24, 0x2B	; 43
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	8b e2       	ldi	r24, 0x2B	; 43
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	fc 01       	movw	r30, r24
 3ba:	10 82       	st	Z, r1
			UCSR0A |= (1 << TXC0);
 3bc:	80 ec       	ldi	r24, 0xC0	; 192
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	20 ec       	ldi	r18, 0xC0	; 192
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	20 81       	ld	r18, Z
 3c8:	20 64       	ori	r18, 0x40	; 64
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
			
			uint8_t timeout = 0;
 3ce:	1f 82       	std	Y+7, r1	; 0x07
 			do
			{
				if(UCSR0A & (1<<RXC0))
 3d0:	80 ec       	ldi	r24, 0xC0	; 192
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	88 1f       	adc	r24, r24
 3da:	88 27       	eor	r24, r24
 3dc:	88 1f       	adc	r24, r24
 3de:	88 23       	and	r24, r24
 3e0:	71 f0       	breq	.+28     	; 0x3fe <main+0x26c>
				{
					*pRxData++ = UDR0;
 3e2:	8b 81       	ldd	r24, Y+3	; 0x03
 3e4:	9c 81       	ldd	r25, Y+4	; 0x04
 3e6:	9c 01       	movw	r18, r24
 3e8:	2f 5f       	subi	r18, 0xFF	; 255
 3ea:	3f 4f       	sbci	r19, 0xFF	; 255
 3ec:	3c 83       	std	Y+4, r19	; 0x04
 3ee:	2b 83       	std	Y+3, r18	; 0x03
 3f0:	26 ec       	ldi	r18, 0xC6	; 198
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	f9 01       	movw	r30, r18
 3f6:	20 81       	ld	r18, Z
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
					timeout = 0;
 3fc:	1f 82       	std	Y+7, r1	; 0x07
			UCSR0B &= ~(1 << TXB80);
			PORTD &= !0x80;
			UCSR0A |= (1 << TXC0);
			
			uint8_t timeout = 0;
 			do
 3fe:	8f 81       	ldd	r24, Y+7	; 0x07
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	8f 83       	std	Y+7, r24	; 0x07
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	9f 81       	ldd	r25, Y+7	; 0x07
 408:	99 23       	and	r25, r25
 40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	88 23       	and	r24, r24
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	de cf       	rjmp	.-68     	; 0x3d0 <main+0x23e>
					timeout = 0;
				}
			}
			while(0 < ++timeout);
			
			if(RxData != pRxData)
 414:	ce 01       	movw	r24, r28
 416:	0c 96       	adiw	r24, 0x0c	; 12
 418:	2b 81       	ldd	r18, Y+3	; 0x03
 41a:	3c 81       	ldd	r19, Y+4	; 0x04
 41c:	28 17       	cp	r18, r24
 41e:	39 07       	cpc	r19, r25
 420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	77 c0       	rjmp	.+238    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
			{
				uint8_t msgLength = pRxData - RxData;
 424:	2b 81       	ldd	r18, Y+3	; 0x03
 426:	3c 81       	ldd	r19, Y+4	; 0x04
 428:	ce 01       	movw	r24, r28
 42a:	0c 96       	adiw	r24, 0x0c	; 12
 42c:	a9 01       	movw	r20, r18
 42e:	48 1b       	sub	r20, r24
 430:	59 0b       	sbc	r21, r25
 432:	ca 01       	movw	r24, r20
 434:	8b 87       	std	Y+11, r24	; 0x0b
				uint8_t check = 0;
 436:	18 86       	std	Y+8, r1	; 0x08
				for(uint8_t i = 0; i < msgLength; i++)
 438:	19 86       	std	Y+9, r1	; 0x09
 43a:	99 85       	ldd	r25, Y+9	; 0x09
 43c:	8b 85       	ldd	r24, Y+11	; 0x0b
 43e:	98 17       	cp	r25, r24
 440:	88 f4       	brcc	.+34     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				{
					check ^= RxData[i];
 442:	89 85       	ldd	r24, Y+9	; 0x09
 444:	88 2f       	mov	r24, r24
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	9e 01       	movw	r18, r28
 44a:	24 5f       	subi	r18, 0xF4	; 244
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	82 0f       	add	r24, r18
 450:	93 1f       	adc	r25, r19
 452:	fc 01       	movw	r30, r24
 454:	80 81       	ld	r24, Z
 456:	98 85       	ldd	r25, Y+8	; 0x08
 458:	89 27       	eor	r24, r25
 45a:	88 87       	std	Y+8, r24	; 0x08
			
			if(RxData != pRxData)
			{
				uint8_t msgLength = pRxData - RxData;
				uint8_t check = 0;
				for(uint8_t i = 0; i < msgLength; i++)
 45c:	89 85       	ldd	r24, Y+9	; 0x09
 45e:	8f 5f       	subi	r24, 0xFF	; 255
 460:	89 87       	std	Y+9, r24	; 0x09
 462:	eb cf       	rjmp	.-42     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				{
					check ^= RxData[i];
				}
				if(!check)
 464:	88 85       	ldd	r24, Y+8	; 0x08
 466:	88 23       	and	r24, r24
 468:	09 f0       	breq	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	4f c0       	rjmp	.+158    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				{
					while(!(UCSR1A & (1 << UDRE1)));
 46c:	88 ec       	ldi	r24, 0xC8	; 200
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	80 81       	ld	r24, Z
 474:	88 2f       	mov	r24, r24
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	80 72       	andi	r24, 0x20	; 32
 47a:	99 27       	eor	r25, r25
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	89 2b       	or	r24, r25
 480:	09 f0       	breq	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	22 23       	and	r18, r18
 486:	09 f0       	breq	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 488:	f1 cf       	rjmp	.-30     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
					UDR1 = msgLength + 2;
 48a:	8e ec       	ldi	r24, 0xCE	; 206
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	2b 85       	ldd	r18, Y+11	; 0x0b
 490:	2e 5f       	subi	r18, 0xFE	; 254
 492:	fc 01       	movw	r30, r24
 494:	20 83       	st	Z, r18
					while(!(UCSR1A & (1 << UDRE1)));
 496:	88 ec       	ldi	r24, 0xC8	; 200
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	80 81       	ld	r24, Z
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	80 72       	andi	r24, 0x20	; 32
 4a4:	99 27       	eor	r25, r25
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	89 2b       	or	r24, r25
 4aa:	09 f0       	breq	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	22 23       	and	r18, r18
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	f1 cf       	rjmp	.-30     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
					UDR1 = XPNAddress;
 4b4:	8e ec       	ldi	r24, 0xCE	; 206
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	29 81       	ldd	r18, Y+1	; 0x01
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
					for(uint8_t x = 0; x < msgLength; x++)
 4be:	1a 86       	std	Y+10, r1	; 0x0a
 4c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 4c2:	8b 85       	ldd	r24, Y+11	; 0x0b
 4c4:	98 17       	cp	r25, r24
 4c6:	08 f5       	brcc	.+66     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
					{
						while(!(UCSR1A & (1 << UDRE1)));
 4c8:	88 ec       	ldi	r24, 0xC8	; 200
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	80 81       	ld	r24, Z
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	80 72       	andi	r24, 0x20	; 32
 4d6:	99 27       	eor	r25, r25
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	89 2b       	or	r24, r25
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	22 23       	and	r18, r18
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	f1 cf       	rjmp	.-30     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
						UDR1 = RxData[x];
 4e6:	8e ec       	ldi	r24, 0xCE	; 206
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	2a 85       	ldd	r18, Y+10	; 0x0a
 4ec:	22 2f       	mov	r18, r18
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	ae 01       	movw	r20, r28
 4f2:	44 5f       	subi	r20, 0xF4	; 244
 4f4:	5f 4f       	sbci	r21, 0xFF	; 255
 4f6:	24 0f       	add	r18, r20
 4f8:	35 1f       	adc	r19, r21
 4fa:	f9 01       	movw	r30, r18
 4fc:	20 81       	ld	r18, Z
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
				{
					while(!(UCSR1A & (1 << UDRE1)));
					UDR1 = msgLength + 2;
					while(!(UCSR1A & (1 << UDRE1)));
					UDR1 = XPNAddress;
					for(uint8_t x = 0; x < msgLength; x++)
 502:	8a 85       	ldd	r24, Y+10	; 0x0a
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	8a 87       	std	Y+10, r24	; 0x0a
 508:	db cf       	rjmp	.-74     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
						while(!(UCSR1A & (1 << UDRE1)));
						UDR1 = RxData[x];
					}
				}
				
				pRxData = RxData;
 50a:	ce 01       	movw	r24, r28
 50c:	0c 96       	adiw	r24, 0x0c	; 12
 50e:	9c 83       	std	Y+4, r25	; 0x04
 510:	8b 83       	std	Y+3, r24	; 0x03
	
	sei();
	
    while (1) 
    {
		for(XPNAddress = 1; XPNAddress < 32; XPNAddress++)
 512:	89 81       	ldd	r24, Y+1	; 0x01
 514:	8f 5f       	subi	r24, 0xFF	; 255
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	7f ce       	rjmp	.-770    	; 0x218 <main+0x86>

0000051a <memcpy>:
 51a:	fb 01       	movw	r30, r22
 51c:	dc 01       	movw	r26, r24
 51e:	02 c0       	rjmp	.+4      	; 0x524 <memcpy+0xa>
 520:	01 90       	ld	r0, Z+
 522:	0d 92       	st	X+, r0
 524:	41 50       	subi	r20, 0x01	; 1
 526:	50 40       	sbci	r21, 0x00	; 0
 528:	d8 f7       	brcc	.-10     	; 0x520 <memcpy+0x6>
 52a:	08 95       	ret

0000052c <_exit>:
 52c:	f8 94       	cli

0000052e <__stop_program>:
 52e:	ff cf       	rjmp	.-2      	; 0x52e <__stop_program>
