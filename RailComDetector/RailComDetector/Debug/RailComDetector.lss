
RailComDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  0000027e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800200  00800200  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a20  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085a  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000330  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001aa  00000000  00000000  00001fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	57 c0       	rjmp	.+174    	; 0x120 <__vector_28>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e7       	ldi	r30, 0x7E	; 126
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4e d0       	rcall	.+156    	; 0x160 <main>
  c4:	da c0       	rjmp	.+436    	; 0x27a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_3>:
};
		
uAddress MyAddress;

ISR(INT2_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	if((1 << PINB2) == (PINB & (1 << PINB2)))
  dc:	1a 9b       	sbis	0x03, 2	; 3
  de:	10 c0       	rjmp	.+32     	; 0x100 <__vector_3+0x38>
	{
		//	Rising Edge --> End of RailCom Gap
		EICRA = (1 << ISC21);	//	INT2 falling Edge Interrupt Request
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
		UCSR1B &= ~(1 << RXEN1);	//	Receiver Disable
  e6:	e9 ec       	ldi	r30, 0xC9	; 201
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8f 7e       	andi	r24, 0xEF	; 239
  ee:	80 83       	st	Z, r24
		if (dataCounter > 0)
  f0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <dataCounter>
  f4:	88 23       	and	r24, r24
  f6:	51 f0       	breq	.+20     	; 0x10c <__vector_3+0x44>
		{
			dataReady = true;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dataReady>
  fe:	06 c0       	rjmp	.+12     	; 0x10c <__vector_3+0x44>
		}
	}
	else
	{
		//	Falling Edge --> Start of RailCom Gap
		EICRA = (1 << ISC21) | (1 << ISC20);	//	INT2 Rising Edge Interrupt Request
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
		UCSR1B = (1 << RXCIE1) | (1 << RXEN1);	// Receiver Enable, RX Complete Interrupt Enable
 106:	80 e9       	ldi	r24, 0x90	; 144
 108:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	}
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0b be       	out	0x3b, r0	; 59
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_28>:

ISR(USART1_RX_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	0b b6       	in	r0, 0x3b	; 59
 12c:	0f 92       	push	r0
 12e:	8f 93       	push	r24
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	data[dataCounter++] = UDR1;
 134:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <dataCounter>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	8e 0f       	add	r24, r30
 13c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <dataCounter>
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 146:	ed 5f       	subi	r30, 0xFD	; 253
 148:	fd 4f       	sbci	r31, 0xFD	; 253
 14a:	80 83       	st	Z, r24
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0b be       	out	0x3b, r0	; 59
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <main>:

int main(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	60 97       	sbiw	r28, 0x10	; 16
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
//    DDRB = 0x00;	//	PortB All Inputs
	 
	EICRA = (1 << ISC21);	//	INT2 falling Edge Interrupt Request
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1 << INT2);	//	External Interrupt Request 2 Enable
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	8d bb       	out	0x1d, r24	; 29
	
	UBRR1 = (F_CPU / (16 * RAILCOM_BAUDRATE)) - 1;	//	Baudrate
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 186:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1C = (3 << UCSZ10);	//	8-bit Data Size, No Parity, 1 Stop-bit
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
//	UCSR1B = (1 << RXCIE1);
	
	sei();	//	Enable Global Interrupts
 190:	78 94       	sei
    while (1) 
    {
		while(!dataReady);
		cli();
		uint8_t RailcomBuffer[8];
		memset(RailcomBuffer, 0, 8);
 192:	8e 01       	movw	r16, r28
 194:	07 5f       	subi	r16, 0xF7	; 247
 196:	1f 4f       	sbci	r17, 0xFF	; 255
 198:	68 94       	set
 19a:	aa 24       	eor	r10, r10
 19c:	a3 f8       	bld	r10, 3
		uint8_t RailcomCount = dataCounter;
		uint8_t RailComMessage[8];
		memset(RailComMessage, 0, 8);
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	7c 01       	movw	r14, r24
				}
				
				case 1:	//	app:adr_low
				{
					uint16_t OldAddress = MyAddress.Address;
					MyAddress.AddrLow = ((RailComMessage[0] & 0x03) << 6) + (RailComMessage[1] & 0x3F);
 1a4:	0f 2e       	mov	r0, r31
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	cf 2e       	mov	r12, r31
 1aa:	f2 e0       	ldi	r31, 0x02	; 2
 1ac:	df 2e       	mov	r13, r31
 1ae:	f0 2d       	mov	r31, r0
		for(uint8_t index = 0; index < RailcomCount; index++)
		{
			RailComMessage[index] = RailComEncoding[RailcomBuffer[index]];
			if(RailComMessage[index] & 0x80)
			{
				ErrorInFrame = true;
 1b0:	bb 24       	eor	r11, r11
 1b2:	b3 94       	inc	r11
	
	sei();	//	Enable Global Interrupts
		
    while (1) 
    {
		while(!dataReady);
 1b4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dataReady>
 1b8:	88 23       	and	r24, r24
 1ba:	e1 f3       	breq	.-8      	; 0x1b4 <main+0x54>
		cli();
 1bc:	f8 94       	cli
		uint8_t RailcomBuffer[8];
		memset(RailcomBuffer, 0, 8);
 1be:	f8 01       	movw	r30, r16
 1c0:	8a 2d       	mov	r24, r10
 1c2:	11 92       	st	Z+, r1
 1c4:	8a 95       	dec	r24
 1c6:	e9 f7       	brne	.-6      	; 0x1c2 <main+0x62>
		uint8_t RailcomCount = dataCounter;
 1c8:	90 90 0b 02 	lds	r9, 0x020B	; 0x80020b <dataCounter>
		uint8_t RailComMessage[8];
		memset(RailComMessage, 0, 8);
 1cc:	f7 01       	movw	r30, r14
 1ce:	8a 2d       	mov	r24, r10
 1d0:	11 92       	st	Z+, r1
 1d2:	8a 95       	dec	r24
 1d4:	e9 f7       	brne	.-6      	; 0x1d0 <main+0x70>
		dataCounter = 0;
 1d6:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <dataCounter>
		dataReady = false;
 1da:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <dataReady>
		bool ErrorInFrame = false;
		memcpy(RailcomBuffer, (const void*)data, RailcomCount);
 1de:	49 2d       	mov	r20, r9
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	63 e0       	ldi	r22, 0x03	; 3
 1e4:	72 e0       	ldi	r23, 0x02	; 2
 1e6:	c8 01       	movw	r24, r16
 1e8:	3f d0       	rcall	.+126    	; 0x268 <memcpy>
		sei();
 1ea:	78 94       	sei
		for(uint8_t index = 0; index < RailcomCount; index++)
 1ec:	99 20       	and	r9, r9
 1ee:	e1 f0       	breq	.+56     	; 0x228 <main+0xc8>
 1f0:	de 01       	movw	r26, r28
 1f2:	19 96       	adiw	r26, 0x09	; 9
 1f4:	9e 01       	movw	r18, r28
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	9a 94       	dec	r9
 1fc:	89 2d       	mov	r24, r9
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	8a 0f       	add	r24, r26
 204:	9b 1f       	adc	r25, r27
 206:	50 e0       	ldi	r21, 0x00	; 0
		{
			RailComMessage[index] = RailComEncoding[RailcomBuffer[index]];
 208:	ed 91       	ld	r30, X+
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e0 50       	subi	r30, 0x00	; 0
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	40 81       	ld	r20, Z
 212:	f9 01       	movw	r30, r18
 214:	41 93       	st	Z+, r20
 216:	9f 01       	movw	r18, r30
			if(RailComMessage[index] & 0x80)
 218:	44 23       	and	r20, r20
 21a:	0c f4       	brge	.+2      	; 0x21e <main+0xbe>
			{
				ErrorInFrame = true;
 21c:	5b 2d       	mov	r21, r11
		dataCounter = 0;
		dataReady = false;
		bool ErrorInFrame = false;
		memcpy(RailcomBuffer, (const void*)data, RailcomCount);
		sei();
		for(uint8_t index = 0; index < RailcomCount; index++)
 21e:	a8 17       	cp	r26, r24
 220:	b9 07       	cpc	r27, r25
 222:	91 f7       	brne	.-28     	; 0x208 <main+0xa8>
			{
				ErrorInFrame = true;
			}
		}
		
		if(!ErrorInFrame)
 224:	51 11       	cpse	r21, r1
 226:	c6 cf       	rjmp	.-116    	; 0x1b4 <main+0x54>
		{
			uint8_t MessageID = (RailComMessage[0] & 0x3C) >> 2;
 228:	29 81       	ldd	r18, Y+1	; 0x01
			switch(MessageID)
 22a:	82 2f       	mov	r24, r18
 22c:	8c 73       	andi	r24, 0x3C	; 60
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	91 05       	cpc	r25, r1
 23c:	19 f0       	breq	.+6      	; 0x244 <main+0xe4>
 23e:	02 97       	sbiw	r24, 0x02	; 2
 240:	51 f0       	breq	.+20     	; 0x256 <main+0xf6>
 242:	b8 cf       	rjmp	.-144    	; 0x1b4 <main+0x54>
				}
				
				case 1:	//	app:adr_low
				{
					uint16_t OldAddress = MyAddress.Address;
					MyAddress.AddrLow = ((RailComMessage[0] & 0x03) << 6) + (RailComMessage[1] & 0x3F);
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	8f 73       	andi	r24, 0x3F	; 63
 248:	f0 e4       	ldi	r31, 0x40	; 64
 24a:	2f 9f       	mul	r18, r31
 24c:	80 0d       	add	r24, r0
 24e:	11 24       	eor	r1, r1
 250:	f6 01       	movw	r30, r12
 252:	81 83       	std	Z+1, r24	; 0x01
					break;
 254:	af cf       	rjmp	.-162    	; 0x1b4 <main+0x54>
				}
				
				case 2:	//	app:adr_high
				{
					uint16_t OldAddress = MyAddress.Address;
					MyAddress.AddrHigh = ((RailComMessage[0] & 0x03) << 6) + (RailComMessage[1] & 0x3F);
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	8f 73       	andi	r24, 0x3F	; 63
 25a:	f0 e4       	ldi	r31, 0x40	; 64
 25c:	2f 9f       	mul	r18, r31
 25e:	80 0d       	add	r24, r0
 260:	11 24       	eor	r1, r1
 262:	f6 01       	movw	r30, r12
 264:	80 83       	st	Z, r24
	UCSR1C = (3 << UCSZ10);	//	8-bit Data Size, No Parity, 1 Stop-bit
//	UCSR1B = (1 << RXCIE1);
	
	sei();	//	Enable Global Interrupts
		
    while (1) 
 266:	a6 cf       	rjmp	.-180    	; 0x1b4 <main+0x54>

00000268 <memcpy>:
 268:	fb 01       	movw	r30, r22
 26a:	dc 01       	movw	r26, r24
 26c:	02 c0       	rjmp	.+4      	; 0x272 <memcpy+0xa>
 26e:	01 90       	ld	r0, Z+
 270:	0d 92       	st	X+, r0
 272:	41 50       	subi	r20, 0x01	; 1
 274:	50 40       	sbci	r21, 0x00	; 0
 276:	d8 f7       	brcc	.-10     	; 0x26e <memcpy+0x6>
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
