
RailComDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  0000073e  000007d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000129  00800218  00800218  000008ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001475  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cec  00000000  00000000  00001e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a41  00000000  00000000  00002b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  000035c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000880  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075b  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004823  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__vector_1>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	87 c0       	rjmp	.+270    	; 0x11c <__vector_3>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	a7 c0       	rjmp	.+334    	; 0x198 <__vector_18>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	a7 c2       	rjmp	.+1358   	; 0x5a0 <__vector_20>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c3       	rjmp	.+1566   	; 0x678 <__vector_22>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	ab c0       	rjmp	.+342    	; 0x1c8 <__vector_28>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	85 03       	fmuls	r16, r21

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e4       	ldi	r29, 0x40	; 64
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	12 e0       	ldi	r17, 0x02	; 2
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	ee e3       	ldi	r30, 0x3E	; 62
  a2:	f7 e0       	ldi	r31, 0x07	; 7
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a8 31       	cpi	r26, 0x18	; 24
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	23 e0       	ldi	r18, 0x03	; 3
  b6:	a8 e1       	ldi	r26, 0x18	; 24
  b8:	b2 e0       	ldi	r27, 0x02	; 2
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a1 34       	cpi	r26, 0x41	; 65
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	22 d3       	rcall	.+1604   	; 0x716 <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	a3 d0       	rcall	.+326    	; 0x220 <main>
  da:	2f c3       	rjmp	.+1630   	; 0x73a <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <__vector_1>:

volatile bool bOccupied = false;
bool bPreviousOccupied = false;

ISR(INT0_vect)	//	Occupancy detection : enter occupied state
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	0b b6       	in	r0, 0x3b	; 59
  ea:	0f 92       	push	r0
  ec:	8f 93       	push	r24
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	TIFR0 = 0xFF;			//	Clear all pending interrupts from TimerCounter0
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	85 bb       	out	0x15, r24	; 21
	TIMSK0 |= (1 << TOIE0);	//	Enable TC0 Overflow Interrupt
  f6:	ee e6       	ldi	r30, 0x6E	; 110
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
	TCNT0 = 0;				//	start new delay
 100:	16 bc       	out	0x26, r1	; 38
	bOccupied = true;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <bOccupied>
}
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0b be       	out	0x3b, r0	; 59
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_3>:

ISR(INT2_vect)	//	RailComGap detection
{	
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	0b b6       	in	r0, 0x3b	; 59
 128:	0f 92       	push	r0
 12a:	8f 93       	push	r24
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	if(EICRA & (1 << ISC20))	//	Rising or Falling edge ?
 130:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 134:	84 ff       	sbrs	r24, 4
 136:	1c c0       	rjmp	.+56     	; 0x170 <__vector_3+0x54>
	{
		//	Rising Edge --> End of RailCom Gap
		EICRA = (2 << ISC20) | (2 << ISC00);	//	INT2 & INT0 falling Edge Interrupt Request
 138:	82 e2       	ldi	r24, 0x22	; 34
 13a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
		EIMSK = (1 << INT0) | (1 << INT2);		//	External Interrupt Request 2 and 0 Enable
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	8d bb       	out	0x1d, r24	; 29
		UCSR1B &= ~(1 << RXEN1);				//	Receiver Disable
 142:	e9 ec       	ldi	r30, 0xC9	; 201
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	80 83       	st	Z, r24
		if (!bRxError && (dataCounter > 0))
 14c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bRxError>
 150:	81 11       	cpse	r24, r1
 152:	05 c0       	rjmp	.+10     	; 0x15e <__vector_3+0x42>
 154:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <dataCounter>
 158:	81 11       	cpse	r24, r1
 15a:	03 c0       	rjmp	.+6      	; 0x162 <__vector_3+0x46>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <__vector_3+0x48>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	01 c0       	rjmp	.+2      	; 0x164 <__vector_3+0x48>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	88 23       	and	r24, r24
 166:	71 f0       	breq	.+28     	; 0x184 <__vector_3+0x68>
		{
			bRailComDataReady = true;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <bRailComDataReady>
 16e:	0a c0       	rjmp	.+20     	; 0x184 <__vector_3+0x68>
		}
	}
	else
	{
		//	Falling Edge --> Start of RailCom Gap
		bRxError = false;
 170:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <bRxError>
		EICRA = (3 << ISC20);					//	INT2 Rising Edge Interrupt Request
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
		EIMSK = (1 << INT2);					//	this clears INT0 Interrupt enable mask
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	8d bb       	out	0x1d, r24	; 29
		UCSR1B = (1 << RXCIE1) | (1 << RXEN1);	// Receiver Enable, RX Complete Interrupt Enable
 17e:	80 e9       	ldi	r24, 0x90	; 144
 180:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	}
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0b be       	out	0x3b, r0	; 59
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_18>:

ISR(TIMER0_OVF_vect)	//	Occupancy detection timeout : enter idle state
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	8f 93       	push	r24
	TIFR0 = 0xFF;	//	Clear all pending interrupts
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = 0;		//	Disable further interrupts from timer
 1a8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	bOccupied = false;
 1ac:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <bOccupied>
	bHighAddressValid = false;
 1b0:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <bHighAddressValid>
	bLowAddressValid = false;
 1b4:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <bLowAddressValid>
	bAddressResponded = false;
 1b8:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <bAddressResponded>
}
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_28>:

ISR(USART1_RX_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	0b b6       	in	r0, 0x3b	; 59
 1d4:	0f 92       	push	r0
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	uint8_t RxErrors = UCSR1A & ((1 << FE1) | (1 << DOR1) | (1 << UPE1));
 1de:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1e2:	8c 71       	andi	r24, 0x1C	; 28
	RawRailcomMessage[dataCounter++] = UDR1;
 1e4:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <dataCounter>
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	9e 0f       	add	r25, r30
 1ec:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <dataCounter>
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1f6:	ed 5c       	subi	r30, 0xCD	; 205
 1f8:	fd 4f       	sbci	r31, 0xFD	; 253
 1fa:	90 83       	st	Z, r25
	
	if(RxErrors)
 1fc:	88 23       	and	r24, r24
 1fe:	29 f0       	breq	.+10     	; 0x20a <__vector_28+0x42>
	{
		dataCounter = 0;
 200:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <dataCounter>
		bRxError = true;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <bRxError>
	}
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0b be       	out	0x3b, r0	; 59
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <main>:

uint8_t resetSource = 0;

int main(void)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	2a 97       	sbiw	r28, 0x0a	; 10
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
	resetSource = MCUSR;
 234:	84 b7       	in	r24, 0x34	; 52
 236:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
	MCUSR = 0;
 23a:	14 be       	out	0x34, r1	; 52
	
	EICRA = (2 << ISC20) | (2 << ISC00);	//	INT2 and INT0 falling Edge Interrupt Request
 23c:	82 e2       	ldi	r24, 0x22	; 34
 23e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1 << INT2) | (1 << INT0);	//	External Interrupt Request 2 and 0 Enable
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	8d bb       	out	0x1d, r24	; 29

	
	//	USART1 Initialization (RailCom)
	UBRR1 = (F_CPU / (16 * RAILCOM_BAUDRATE)) - 1;	//	Baudrate
 246:	24 e0       	ldi	r18, 0x04	; 4
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 24e:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1C = (3 << UCSZ10);	//	8-bit Data Size, No Parity, 1 Stop-bit
 252:	96 e0       	ldi	r25, 0x06	; 6
 254:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
	
	//	TimerCounter0 Initialization (Occupancy Detection)
	TCCR0B = (5 << CS00);	//	1024 prescaller
 258:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);	//	Enable TCO overflow interrupt
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

	XpressNetClientSetup(XPRESSNETADDRESS);
 260:	8f e1       	ldi	r24, 0x1F	; 31
 262:	89 83       	std	Y+1, r24	; 0x01
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	4d d1       	rcall	.+666    	; 0x504 <_Z20XpressNetClientSetupRKh>
	
	sei();	//	Enable Global Interrupts
 26a:	78 94       	sei
		
    while (1) 
    {
		if(bOccupied != bPreviousOccupied)
 26c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <bOccupied>
 270:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <bPreviousOccupied>
 274:	98 17       	cp	r25, r24
 276:	e1 f0       	breq	.+56     	; 0x2b0 <main+0x90>
		{
			bPreviousOccupied = bOccupied;
 278:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <bOccupied>
 27c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <bPreviousOccupied>
			uint8_t IdleMessage[] = {0x6, 0x73, 0xF0, 0x00, 0x01, 0x00};
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	e0 e0       	ldi	r30, 0x00	; 0
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	de 01       	movw	r26, r28
 288:	12 96       	adiw	r26, 0x02	; 2
 28a:	01 90       	ld	r0, Z+
 28c:	0d 92       	st	X+, r0
 28e:	8a 95       	dec	r24
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x6a>
				
			if(bOccupied)
 292:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <bOccupied>
 296:	88 23       	and	r24, r24
 298:	11 f0       	breq	.+4      	; 0x29e <main+0x7e>
			{
				IdleMessage[2] = 0xF1;
 29a:	81 ef       	ldi	r24, 0xF1	; 241
 29c:	8c 83       	std	Y+4, r24	; 0x04
			}
			
			IdleMessage[5] = IdleMessage[1] ^ IdleMessage[2] ^ IdleMessage[3] ^ IdleMessage[4];
 29e:	9c 81       	ldd	r25, Y+4	; 0x04
 2a0:	83 e7       	ldi	r24, 0x73	; 115
 2a2:	89 27       	eor	r24, r25
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	89 27       	eor	r24, r25
 2a8:	8f 83       	std	Y+7, r24	; 0x07
			XpressNetClientRespond(IdleMessage);
 2aa:	ce 01       	movw	r24, r28
 2ac:	02 96       	adiw	r24, 0x02	; 2
 2ae:	52 d1       	rcall	.+676    	; 0x554 <_Z22XpressNetClientRespondPKh>
			
		}	//	new occupancy state
		
		if(bXpressNetMessageFromHostReady)
 2b0:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <bXpressNetMessageFromHostReady>
		{
			
		}	//	bXpressNetMessageReady
		
		if(bRailComDataReady)
 2b4:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <bRailComDataReady>
 2b8:	88 23       	and	r24, r24
 2ba:	c1 f2       	breq	.-80     	; 0x26c <main+0x4c>
		{

			memset(RailcomBuffer, 0, 8);
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	e5 e2       	ldi	r30, 0x25	; 37
 2c0:	f2 e0       	ldi	r31, 0x02	; 2
 2c2:	df 01       	movw	r26, r30
 2c4:	28 2f       	mov	r18, r24
 2c6:	1d 92       	st	X+, r1
 2c8:	2a 95       	dec	r18
 2ca:	e9 f7       	brne	.-6      	; 0x2c6 <main+0xa6>
			memset(RailComMessage, 0, 8);
 2cc:	ed e1       	ldi	r30, 0x1D	; 29
 2ce:	f2 e0       	ldi	r31, 0x02	; 2
 2d0:	df 01       	movw	r26, r30
 2d2:	1d 92       	st	X+, r1
 2d4:	8a 95       	dec	r24
 2d6:	e9 f7       	brne	.-6      	; 0x2d2 <main+0xb2>

			cli();
 2d8:	f8 94       	cli
			uint8_t RailcomCount = dataCounter;
 2da:	f0 90 3b 02 	lds	r15, 0x023B	; 0x80023b <dataCounter>
			dataCounter = 0;
 2de:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <dataCounter>
			bRailComDataReady = false;
 2e2:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <bRailComDataReady>
			memcpy(RailcomBuffer, (const void*)RawRailcomMessage, RailcomCount);
 2e6:	0f 2d       	mov	r16, r15
 2e8:	10 e0       	ldi	r17, 0x00	; 0
 2ea:	a8 01       	movw	r20, r16
 2ec:	63 e3       	ldi	r22, 0x33	; 51
 2ee:	72 e0       	ldi	r23, 0x02	; 2
 2f0:	85 e2       	ldi	r24, 0x25	; 37
 2f2:	92 e0       	ldi	r25, 0x02	; 2
 2f4:	19 d2       	rcall	.+1074   	; 0x728 <memcpy>
			sei();
 2f6:	78 94       	sei

			bool ErrorInFrame = false;
			for(uint8_t index = 0; index < RailcomCount; index++)
 2f8:	20 e0       	ldi	r18, 0x00	; 0
			dataCounter = 0;
			bRailComDataReady = false;
			memcpy(RailcomBuffer, (const void*)RawRailcomMessage, RailcomCount);
			sei();

			bool ErrorInFrame = false;
 2fa:	40 e0       	ldi	r20, 0x00	; 0
			for(uint8_t index = 0; index < RailcomCount; index++)
 2fc:	2f 15       	cp	r18, r15
 2fe:	98 f4       	brcc	.+38     	; 0x326 <main+0x106>
			{
				RailComMessage[index] = RailComEncoding[RailcomBuffer[index]];
 300:	82 2f       	mov	r24, r18
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fc 01       	movw	r30, r24
 306:	eb 5d       	subi	r30, 0xDB	; 219
 308:	fd 4f       	sbci	r31, 0xFD	; 253
 30a:	e0 81       	ld	r30, Z
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	e9 5e       	subi	r30, 0xE9	; 233
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	30 81       	ld	r19, Z
 314:	fc 01       	movw	r30, r24
 316:	e3 5e       	subi	r30, 0xE3	; 227
 318:	fd 4f       	sbci	r31, 0xFD	; 253
 31a:	30 83       	st	Z, r19
				if(RailComMessage[index] & 0x80)
 31c:	33 23       	and	r19, r19
 31e:	0c f4       	brge	.+2      	; 0x322 <main+0x102>
				{
					ErrorInFrame = true;
 320:	41 e0       	ldi	r20, 0x01	; 1
			bRailComDataReady = false;
			memcpy(RailcomBuffer, (const void*)RawRailcomMessage, RailcomCount);
			sei();

			bool ErrorInFrame = false;
			for(uint8_t index = 0; index < RailcomCount; index++)
 322:	2f 5f       	subi	r18, 0xFF	; 255
 324:	eb cf       	rjmp	.-42     	; 0x2fc <main+0xdc>
				}
			}
			
			uint8_t* pRailComMessage = RailComMessage;
		
			if(!ErrorInFrame)
 326:	41 11       	cpse	r20, r1
 328:	a1 cf       	rjmp	.-190    	; 0x26c <main+0x4c>
 32a:	0f 2e       	mov	r0, r31
 32c:	fd e1       	ldi	r31, 0x1D	; 29
 32e:	ef 2e       	mov	r14, r31
 330:	f2 e0       	ldi	r31, 0x02	; 2
 332:	ff 2e       	mov	r15, r31
 334:	f0 2d       	mov	r31, r0
			{
				do		//	VERIFY THIS DO ... WHILE loop!! (untested - 28/11/2017)
				{
					uint8_t MessageID = (pRailComMessage[0] & 0x3C) >> 2;
 336:	f7 01       	movw	r30, r14
 338:	20 81       	ld	r18, Z
 33a:	82 2f       	mov	r24, r18
 33c:	8c 73       	andi	r24, 0x3C	; 60
 33e:	90 e0       	ldi	r25, 0x00	; 0
					switch(MessageID)
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	91 05       	cpc	r25, r1
 34c:	c1 f1       	breq	.+112    	; 0x3be <main+0x19e>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	91 05       	cpc	r25, r1
 352:	09 f4       	brne	.+2      	; 0x356 <main+0x136>
 354:	43 c0       	rjmp	.+134    	; 0x3dc <main+0x1bc>
 356:	89 2b       	or	r24, r25
 358:	09 f0       	breq	.+2      	; 0x35c <main+0x13c>
 35a:	4e c0       	rjmp	.+156    	; 0x3f8 <main+0x1d8>
					{
						case 0:		//	Channel 2 POM
						{
							uint8_t message[] = {0x09, 0x76, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 35c:	89 e0       	ldi	r24, 0x09	; 9
 35e:	e6 e0       	ldi	r30, 0x06	; 6
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	de 01       	movw	r26, r28
 364:	12 96       	adiw	r26, 0x02	; 2
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	8a 95       	dec	r24
 36c:	e1 f7       	brne	.-8      	; 0x366 <main+0x146>
							if(bHighAddressValid && bLowAddressValid)
 36e:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <bHighAddressValid>
 372:	88 23       	and	r24, r24
 374:	19 f0       	breq	.+6      	; 0x37c <main+0x15c>
 376:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <bLowAddressValid>
 37a:	01 c0       	rjmp	.+2      	; 0x37e <main+0x15e>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	88 23       	and	r24, r24
 380:	31 f0       	breq	.+12     	; 0x38e <main+0x16e>
							{
								message[3] = MyAddress.AddrHigh;
 382:	eb e1       	ldi	r30, 0x1B	; 27
 384:	f2 e0       	ldi	r31, 0x02	; 2
 386:	80 81       	ld	r24, Z
 388:	8d 83       	std	Y+5, r24	; 0x05
								message[4] = MyAddress.AddrLow;
 38a:	81 81       	ldd	r24, Z+1	; 0x01
 38c:	8e 83       	std	Y+6, r24	; 0x06
							}
							message[7] = ((pRailComMessage[0] & 0x03) << 6) + (pRailComMessage[1] & 0x3F);
 38e:	d7 01       	movw	r26, r14
 390:	9c 91       	ld	r25, X
 392:	11 96       	adiw	r26, 0x01	; 1
 394:	8c 91       	ld	r24, X
 396:	8f 73       	andi	r24, 0x3F	; 63
 398:	b0 e4       	ldi	r27, 0x40	; 64
 39a:	9b 9f       	mul	r25, r27
 39c:	80 0d       	add	r24, r0
 39e:	11 24       	eor	r1, r1
 3a0:	89 87       	std	Y+9, r24	; 0x09
							message[8] = message[1] ^ message[2] ^ message[3] ^ message[4] ^ message[5] ^ message[6] ^ message[7];
 3a2:	3d 81       	ldd	r19, Y+5	; 0x05
 3a4:	2e 81       	ldd	r18, Y+6	; 0x06
 3a6:	97 e9       	ldi	r25, 0x97	; 151
 3a8:	93 27       	eor	r25, r19
 3aa:	92 27       	eor	r25, r18
 3ac:	89 27       	eor	r24, r25
							XpressNetClientRespond(message);
 3ae:	8a 87       	std	Y+10, r24	; 0x0a
 3b0:	ce 01       	movw	r24, r28
 3b2:	02 96       	adiw	r24, 0x02	; 2
 3b4:	cf d0       	rcall	.+414    	; 0x554 <_Z22XpressNetClientRespondPKh>
							pRailComMessage += 2;
 3b6:	e2 e0       	ldi	r30, 0x02	; 2
 3b8:	ee 0e       	add	r14, r30
 3ba:	f1 1c       	adc	r15, r1
 3bc:	1d c0       	rjmp	.+58     	; 0x3f8 <main+0x1d8>
							break;
						}
				
						case 1:		//	app:adr_low
						{
							MyAddress.AddrLow = ((pRailComMessage[0] & 0x03) << 6) + (pRailComMessage[1] & 0x3F);
 3be:	81 81       	ldd	r24, Z+1	; 0x01
 3c0:	8f 73       	andi	r24, 0x3F	; 63
 3c2:	b0 e4       	ldi	r27, 0x40	; 64
 3c4:	2b 9f       	mul	r18, r27
 3c6:	80 0d       	add	r24, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <MyAddress+0x1>
							pRailComMessage += 2;
 3ce:	e2 e0       	ldi	r30, 0x02	; 2
 3d0:	ee 0e       	add	r14, r30
 3d2:	f1 1c       	adc	r15, r1
							bLowAddressValid = true;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <bLowAddressValid>
							break;
 3da:	0e c0       	rjmp	.+28     	; 0x3f8 <main+0x1d8>
						}
				
						case 2:		//	app:adr_high
						{
							MyAddress.AddrHigh = ((pRailComMessage[0] & 0x03) << 6) + (pRailComMessage[1] & 0x3F);
 3dc:	81 81       	ldd	r24, Z+1	; 0x01
 3de:	8f 73       	andi	r24, 0x3F	; 63
 3e0:	b0 e4       	ldi	r27, 0x40	; 64
 3e2:	2b 9f       	mul	r18, r27
 3e4:	80 0d       	add	r24, r0
 3e6:	11 24       	eor	r1, r1
 3e8:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <MyAddress>
							pRailComMessage += 2;
 3ec:	e2 e0       	ldi	r30, 0x02	; 2
 3ee:	ee 0e       	add	r14, r30
 3f0:	f1 1c       	adc	r15, r1
							bHighAddressValid = true;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <bHighAddressValid>
						{
							//	Move pRailComMessage beyond &RailComMessage[RailcomCount), to avoid endless loop.
						}
					}
				} 
				while(pRailComMessage < RailComMessage + RailcomCount);
 3f8:	c8 01       	movw	r24, r16
 3fa:	83 5e       	subi	r24, 0xE3	; 227
 3fc:	9d 4f       	sbci	r25, 0xFD	; 253
 3fe:	e8 16       	cp	r14, r24
 400:	f9 06       	cpc	r15, r25
 402:	08 f4       	brcc	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	98 cf       	rjmp	.-208    	; 0x336 <main+0x116>
				
				if((true == bHighAddressValid) && (true == bLowAddressValid) && (false == bAddressResponded))
 406:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <bHighAddressValid>
 40a:	88 23       	and	r24, r24
 40c:	51 f0       	breq	.+20     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 40e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <bLowAddressValid>
 412:	88 23       	and	r24, r24
 414:	41 f0       	breq	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 416:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <bAddressResponded>
 41a:	99 23       	and	r25, r25
 41c:	29 f0       	breq	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	03 c0       	rjmp	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	01 c0       	rjmp	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	88 23       	and	r24, r24
 42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	1f cf       	rjmp	.-450    	; 0x26c <main+0x4c>
				{
					//	Send new address to master
					uint8_t msg[] = {0x08, 0x75, 0xF2, 0x00, 0x01, 0x00, 0x00, 0x00 };
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	ef e0       	ldi	r30, 0x0F	; 15
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	de 01       	movw	r26, r28
 436:	12 96       	adiw	r26, 0x02	; 2
 438:	01 90       	ld	r0, Z+
 43a:	0d 92       	st	X+, r0
 43c:	8a 95       	dec	r24
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
						
					msg[5] = MyAddress.AddrHigh;
 440:	eb e1       	ldi	r30, 0x1B	; 27
 442:	f2 e0       	ldi	r31, 0x02	; 2
 444:	20 81       	ld	r18, Z
 446:	2f 83       	std	Y+7, r18	; 0x07
					msg[6] = MyAddress.AddrLow;
 448:	81 81       	ldd	r24, Z+1	; 0x01
 44a:	88 87       	std	Y+8, r24	; 0x08
					msg[7] = msg[1] ^ msg[2] ^ msg[3] ^ msg[4] ^ msg[5] ^ msg[6];
 44c:	96 e8       	ldi	r25, 0x86	; 134
 44e:	92 27       	eor	r25, r18
 450:	89 27       	eor	r24, r25
					
					XpressNetClientRespond(msg);
 452:	89 87       	std	Y+9, r24	; 0x09
 454:	ce 01       	movw	r24, r28
 456:	02 96       	adiw	r24, 0x02	; 2
 458:	7d d0       	rcall	.+250    	; 0x554 <_Z22XpressNetClientRespondPKh>
					
					bAddressResponded = true;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <bAddressResponded>
 460:	05 cf       	rjmp	.-502    	; 0x26c <main+0x4c>

00000462 <_ZN10RingBufferC1Ev>:
 *  Author: VdBer
 */ 

#include "ringbuffer.h"

RingBuffer::RingBuffer()
 462:	fc 01       	movw	r30, r24
:	m_iBegin(0),
	m_iEnd(0),
	m_bEmpty(true)
 464:	10 82       	st	Z, r1
 466:	11 82       	std	Z+1, r1	; 0x01
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	82 83       	std	Z+2, r24	; 0x02
 46c:	08 95       	ret

0000046e <_ZN10RingBuffer6InsertEh>:
{
}

RingBuffer::BufferStatus RingBuffer::Insert(uint8_t data)
{
 46e:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 470:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 472:	f8 94       	cli
	{
		if((m_iEnd == m_iBegin) && !m_bEmpty)
 474:	21 81       	ldd	r18, Z+1	; 0x01
 476:	80 81       	ld	r24, Z
 478:	28 13       	cpse	r18, r24
 47a:	05 c0       	rjmp	.+10     	; 0x486 <_ZN10RingBuffer6InsertEh+0x18>
 47c:	82 81       	ldd	r24, Z+2	; 0x02
 47e:	88 23       	and	r24, r24
 480:	21 f0       	breq	.+8      	; 0x48a <_ZN10RingBuffer6InsertEh+0x1c>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	03 c0       	rjmp	.+6      	; 0x48c <_ZN10RingBuffer6InsertEh+0x1e>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	01 c0       	rjmp	.+2      	; 0x48c <_ZN10RingBuffer6InsertEh+0x1e>
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	81 11       	cpse	r24, r1
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <_ZN10RingBuffer6InsertEh+0x3c>
		return BufferFull;

		m_pBuffer[m_iEnd++] = data;
 490:	81 81       	ldd	r24, Z+1	; 0x01
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	28 0f       	add	r18, r24
 496:	21 83       	std	Z+1, r18	; 0x01
 498:	df 01       	movw	r26, r30
 49a:	a8 0f       	add	r26, r24
 49c:	b1 1d       	adc	r27, r1
 49e:	13 96       	adiw	r26, 0x03	; 3
 4a0:	6c 93       	st	X, r22

		if(m_iEnd > SIZE - 1)
 4a2:	81 81       	ldd	r24, Z+1	; 0x01
		m_iEnd = 0;

		m_bEmpty = false;
 4a4:	12 82       	std	Z+2, r1	; 0x02
		
		return Success;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <_ZN10RingBuffer6InsertEh+0x3e>
RingBuffer::BufferStatus RingBuffer::Insert(uint8_t data)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if((m_iEnd == m_iBegin) && !m_bEmpty)
		return BufferFull;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4ac:	9f bf       	out	0x3f, r25	; 63

		m_bEmpty = false;
		
		return Success;
	}
}
 4ae:	08 95       	ret

000004b0 <_ZN10RingBuffer8RetrieveEPh>:

RingBuffer::BufferStatus RingBuffer::Retrieve(uint8_t* pData)
{
 4b0:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 4b2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4b4:	f8 94       	cli
	{
		if(m_bEmpty)
 4b6:	82 81       	ldd	r24, Z+2	; 0x02
 4b8:	81 11       	cpse	r24, r1
 4ba:	13 c0       	rjmp	.+38     	; 0x4e2 <_ZN10RingBuffer8RetrieveEPh+0x32>
		{
			return BufferEmpty;
		}
		
		*pData = m_pBuffer[m_iBegin];
 4bc:	80 81       	ld	r24, Z
 4be:	df 01       	movw	r26, r30
 4c0:	a8 0f       	add	r26, r24
 4c2:	b1 1d       	adc	r27, r1
 4c4:	13 96       	adiw	r26, 0x03	; 3
 4c6:	8c 91       	ld	r24, X
 4c8:	db 01       	movw	r26, r22
 4ca:	8c 93       	st	X, r24
		
		if(++m_iBegin > SIZE - 1)
 4cc:	80 81       	ld	r24, Z
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 83       	st	Z, r24
		{
			m_iBegin = 0;
		}
		
		if(m_iBegin == m_iEnd)
 4d2:	20 81       	ld	r18, Z
 4d4:	81 81       	ldd	r24, Z+1	; 0x01
 4d6:	28 13       	cpse	r18, r24
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <_ZN10RingBuffer8RetrieveEPh+0x36>
		{
			m_bEmpty = true;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	82 83       	std	Z+2, r24	; 0x02
		}
		
		return Success;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <_ZN10RingBuffer8RetrieveEPh+0x38>
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if(m_bEmpty)
		{
			return BufferEmpty;
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_ZN10RingBuffer8RetrieveEPh+0x38>
		if(m_iBegin == m_iEnd)
		{
			m_bEmpty = true;
		}
		
		return Success;
 4e6:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4e8:	9f bf       	out	0x3f, r25	; 63
	}
}
 4ea:	08 95       	ret

000004ec <_ZN10RingBuffer13BufferIsEmptyEv>:

const bool RingBuffer::BufferIsEmpty(void)
{
	return m_bEmpty;
 4ec:	fc 01       	movw	r30, r24
 4ee:	82 81       	ldd	r24, Z+2	; 0x02
}
 4f0:	08 95       	ret

000004f2 <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		UCSR0B &= ~((1 << TXEN0) | (1 << TXCIE0));
		PORTD &= ~(1 << PORTD7);
	}
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	31 f4       	brne	.+12     	; 0x502 <_Z41__static_initialization_and_destruction_0ii+0x10>
 4f6:	6f 3f       	cpi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	19 f4       	brne	.+6      	; 0x502 <_Z41__static_initialization_and_destruction_0ii+0x10>
*/

#include "XpressNetClient.h"

uint8_t m_CallByte;
RingBuffer m_Buffer;
 4fc:	8d e3       	ldi	r24, 0x3D	; 61
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	b0 cf       	rjmp	.-160    	; 0x462 <_ZN10RingBufferC1Ev>
 502:	08 95       	ret

00000504 <_Z20XpressNetClientSetupRKh>:
volatile uint8_t m_TransmitCounter;

void XpressNetClientSetup(const uint8_t& XpressNetAddress /* = XPRESSNETADDRESS */)
{
	m_CallByte = 0x40 + XpressNetAddress;
 504:	fc 01       	movw	r30, r24
 506:	80 81       	ld	r24, Z
 508:	80 5c       	subi	r24, 0xC0	; 192
 50a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <m_CallByte>
	for(uint8_t x = 0x40; x != 0; x >>= 1)
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	88 23       	and	r24, r24
 512:	61 f0       	breq	.+24     	; 0x52c <_Z20XpressNetClientSetupRKh+0x28>
	{
		if(m_CallByte & x)
 514:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <m_CallByte>
 518:	28 2f       	mov	r18, r24
 51a:	29 23       	and	r18, r25
 51c:	19 f0       	breq	.+6      	; 0x524 <_Z20XpressNetClientSetupRKh+0x20>
		{
			m_CallByte ^= 0x80;
 51e:	90 58       	subi	r25, 0x80	; 128
 520:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <m_CallByte>
volatile uint8_t m_TransmitCounter;

void XpressNetClientSetup(const uint8_t& XpressNetAddress /* = XPRESSNETADDRESS */)
{
	m_CallByte = 0x40 + XpressNetAddress;
	for(uint8_t x = 0x40; x != 0; x >>= 1)
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	95 95       	asr	r25
 528:	87 95       	ror	r24
 52a:	f2 cf       	rjmp	.-28     	; 0x510 <_Z20XpressNetClientSetupRKh+0xc>
			m_CallByte ^= 0x80;
		}
	}
	
	//	PORTD bit 7 used for RS485 Direction
	PORTD &= !0x80;
 52c:	8b b1       	in	r24, 0x0b	; 11
 52e:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0x80;
 530:	80 e8       	ldi	r24, 0x80	; 128
 532:	8a b9       	out	0x0a, r24	; 10
	
	//	USART0 initialization (ExpressNet)
	UBRR0 = (F_CPU / (16 * XPRESSNET_BAUDRATE)) - 1;
 534:	83 e1       	ldi	r24, 0x13	; 19
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 53c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A = (1 << MPCM0);
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C = (0 << USBS0) | (3 << UCSZ00);
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1 << UCSZ02) | (1 << RXEN0) | (1 << RXCIE0);
 54c:	84 e9       	ldi	r24, 0x94	; 148
 54e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 552:	08 95       	ret

00000554 <_Z22XpressNetClientRespondPKh>:
}

RingBuffer::BufferStatus XpressNetClientRespond(const uint8_t* const pResponse)
{
 554:	ff 92       	push	r15
 556:	0f 93       	push	r16
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	8c 01       	movw	r16, r24
	RingBuffer::BufferStatus status = RingBuffer::Success;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 560:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 562:	f8 94       	cli
 564:	91 e0       	ldi	r25, 0x01	; 1
	UCSR0B = (1 << UCSZ02) | (1 << RXEN0) | (1 << RXCIE0);
}

RingBuffer::BufferStatus XpressNetClientRespond(const uint8_t* const pResponse)
{
	RingBuffer::BufferStatus status = RingBuffer::Success;
 566:	80 e0       	ldi	r24, 0x00	; 0
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 568:	99 23       	and	r25, r25
 56a:	99 f0       	breq	.+38     	; 0x592 <_Z22XpressNetClientRespondPKh+0x3e>
	{
		uint8_t msgLength = pResponse[0];
 56c:	f8 01       	movw	r30, r16
 56e:	d0 81       	ld	r29, Z
		for(uint8_t i = 0; i < msgLength; i++)
 570:	c0 e0       	ldi	r28, 0x00	; 0

RingBuffer::BufferStatus XpressNetClientRespond(const uint8_t* const pResponse)
{
	RingBuffer::BufferStatus status = RingBuffer::Success;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 572:	90 e0       	ldi	r25, 0x00	; 0
	{
		uint8_t msgLength = pResponse[0];
		for(uint8_t i = 0; i < msgLength; i++)
 574:	cd 17       	cp	r28, r29
 576:	c0 f7       	brcc	.-16     	; 0x568 <_Z22XpressNetClientRespondPKh+0x14>
		{
			status = m_Buffer.Insert(pResponse[i]);
 578:	f8 01       	movw	r30, r16
 57a:	ec 0f       	add	r30, r28
 57c:	f1 1d       	adc	r31, r1
 57e:	60 81       	ld	r22, Z
 580:	8d e3       	ldi	r24, 0x3D	; 61
 582:	92 e0       	ldi	r25, 0x02	; 2
 584:	74 df       	rcall	.-280    	; 0x46e <_ZN10RingBuffer6InsertEh>
			if(status != RingBuffer::Success)
 586:	88 23       	and	r24, r24
 588:	11 f0       	breq	.+4      	; 0x58e <_Z22XpressNetClientRespondPKh+0x3a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 58a:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
 58c:	03 c0       	rjmp	.+6      	; 0x594 <_Z22XpressNetClientRespondPKh+0x40>
	RingBuffer::BufferStatus status = RingBuffer::Success;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t msgLength = pResponse[0];
		for(uint8_t i = 0; i < msgLength; i++)
 58e:	cf 5f       	subi	r28, 0xFF	; 255
 590:	f0 cf       	rjmp	.-32     	; 0x572 <_Z22XpressNetClientRespondPKh+0x1e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 592:	ff be       	out	0x3f, r15	; 63
				return status;
			}
		}
	}
	return status;
}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	ff 90       	pop	r15
 59e:	08 95       	ret

000005a0 <__vector_20>:

ISR(USART0_RX_vect)
{
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	0b b6       	in	r0, 0x3b	; 59
 5ac:	0f 92       	push	r0
 5ae:	2f 93       	push	r18
 5b0:	3f 93       	push	r19
 5b2:	4f 93       	push	r20
 5b4:	5f 93       	push	r21
 5b6:	6f 93       	push	r22
 5b8:	7f 93       	push	r23
 5ba:	8f 93       	push	r24
 5bc:	9f 93       	push	r25
 5be:	af 93       	push	r26
 5c0:	bf 93       	push	r27
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	1f 92       	push	r1
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t RxErrors = UCSR0A & ((1 << FE0) | (1 << DOR0) | (1 << UPE0));
 5d0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5d4:	8c 71       	andi	r24, 0x1C	; 28
	uint8_t data = UDR0;
 5d6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(!RxErrors)
 5da:	81 11       	cpse	r24, r1
 5dc:	32 c0       	rjmp	.+100    	; 0x642 <__vector_20+0xa2>
	{
		if(UCSR0A & (1 << MPCM0))
 5de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5e2:	80 ff       	sbrs	r24, 0
 5e4:	33 c0       	rjmp	.+102    	; 0x64c <__vector_20+0xac>
		{
			if(data == m_CallByte)
 5e6:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <m_CallByte>
 5ea:	98 13       	cpse	r25, r24
 5ec:	2f c0       	rjmp	.+94     	; 0x64c <__vector_20+0xac>
			{
				if(!(m_Buffer.BufferIsEmpty()))
 5ee:	8d e3       	ldi	r24, 0x3D	; 61
 5f0:	92 e0       	ldi	r25, 0x02	; 2
 5f2:	7c df       	rcall	.-264    	; 0x4ec <_ZN10RingBuffer13BufferIsEmptyEv>
 5f4:	81 11       	cpse	r24, r1
 5f6:	2a c0       	rjmp	.+84     	; 0x64c <__vector_20+0xac>
				{
					if(0 == m_TransmitCounter)
 5f8:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <m_TransmitCounter>
 5fc:	81 11       	cpse	r24, r1
 5fe:	26 c0       	rjmp	.+76     	; 0x64c <__vector_20+0xac>
					{
						m_Buffer.Retrieve((uint8_t*)&m_TransmitCounter);
 600:	6c e3       	ldi	r22, 0x3C	; 60
 602:	72 e0       	ldi	r23, 0x02	; 2
 604:	8d e3       	ldi	r24, 0x3D	; 61
 606:	92 e0       	ldi	r25, 0x02	; 2
 608:	53 df       	rcall	.-346    	; 0x4b0 <_ZN10RingBuffer8RetrieveEPh>
						m_TransmitCounter--;
 60a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <m_TransmitCounter>
 60e:	81 50       	subi	r24, 0x01	; 1
 610:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <m_TransmitCounter>
						uint8_t firstData;
						m_Buffer.Retrieve(&firstData);
 614:	be 01       	movw	r22, r28
 616:	6f 5f       	subi	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8d e3       	ldi	r24, 0x3D	; 61
 61c:	92 e0       	ldi	r25, 0x02	; 2
 61e:	48 df       	rcall	.-368    	; 0x4b0 <_ZN10RingBuffer8RetrieveEPh>
						m_TransmitCounter--;
 620:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <m_TransmitCounter>
 624:	81 50       	subi	r24, 0x01	; 1
 626:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <m_TransmitCounter>
						PORTD |= (1 << PORTD7);
 62a:	8b b1       	in	r24, 0x0b	; 11
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	8b b9       	out	0x0b, r24	; 11
						UCSR0B |= (1 << TXEN0) | (1 << TXCIE0);
 630:	e1 ec       	ldi	r30, 0xC1	; 193
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	88 64       	ori	r24, 0x48	; 72
 638:	80 83       	st	Z, r24
						UDR0 = firstData;
 63a:	89 81       	ldd	r24, Y+1	; 0x01
 63c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 640:	05 c0       	rjmp	.+10     	; 0x64c <__vector_20+0xac>
			//	
		}
	}	//	!RxErrors
	else
	{
		UCSR0A |= (1 << MPCM0);
 642:	e0 ec       	ldi	r30, 0xC0	; 192
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	80 83       	st	Z, r24
	}
}
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0b be       	out	0x3b, r0	; 59
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <__vector_22>:

ISR(USART0_TX_vect)
{
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	0b b6       	in	r0, 0x3b	; 59
 684:	0f 92       	push	r0
 686:	2f 93       	push	r18
 688:	3f 93       	push	r19
 68a:	4f 93       	push	r20
 68c:	5f 93       	push	r21
 68e:	6f 93       	push	r22
 690:	7f 93       	push	r23
 692:	8f 93       	push	r24
 694:	9f 93       	push	r25
 696:	af 93       	push	r26
 698:	bf 93       	push	r27
 69a:	ef 93       	push	r30
 69c:	ff 93       	push	r31
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	1f 92       	push	r1
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
	if(m_TransmitCounter)
 6a8:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <m_TransmitCounter>
 6ac:	88 23       	and	r24, r24
 6ae:	79 f0       	breq	.+30     	; 0x6ce <__vector_22+0x56>
	{
		uint8_t data;
		m_Buffer.Retrieve(&data);
 6b0:	be 01       	movw	r22, r28
 6b2:	6f 5f       	subi	r22, 0xFF	; 255
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	8d e3       	ldi	r24, 0x3D	; 61
 6b8:	92 e0       	ldi	r25, 0x02	; 2
 6ba:	fa de       	rcall	.-524    	; 0x4b0 <_ZN10RingBuffer8RetrieveEPh>
		m_TransmitCounter--;
 6bc:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <m_TransmitCounter>
 6c0:	81 50       	subi	r24, 0x01	; 1
 6c2:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <m_TransmitCounter>
		UDR0 = data;
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <__vector_22+0x66>
	}
	else
	{
		UCSR0B &= ~((1 << TXEN0) | (1 << TXCIE0));
 6ce:	e1 ec       	ldi	r30, 0xC1	; 193
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	87 7b       	andi	r24, 0xB7	; 183
 6d6:	80 83       	st	Z, r24
		PORTD &= ~(1 << PORTD7);
 6d8:	8b b1       	in	r24, 0x0b	; 11
 6da:	8f 77       	andi	r24, 0x7F	; 127
 6dc:	8b b9       	out	0x0b, r24	; 11
	}
 6de:	0f 90       	pop	r0
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0b be       	out	0x3b, r0	; 59
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63
 704:	0f 90       	pop	r0
 706:	1f 90       	pop	r1
 708:	18 95       	reti

0000070a <_GLOBAL__sub_I_m_CallByte>:
 70a:	6f ef       	ldi	r22, 0xFF	; 255
 70c:	7f ef       	ldi	r23, 0xFF	; 255
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	ef ce       	rjmp	.-546    	; 0x4f2 <_Z41__static_initialization_and_destruction_0ii>
 714:	08 95       	ret

00000716 <__tablejump2__>:
 716:	ee 0f       	add	r30, r30
 718:	ff 1f       	adc	r31, r31
 71a:	00 24       	eor	r0, r0
 71c:	00 1c       	adc	r0, r0
 71e:	0b be       	out	0x3b, r0	; 59
 720:	07 90       	elpm	r0, Z+
 722:	f6 91       	elpm	r31, Z
 724:	e0 2d       	mov	r30, r0
 726:	09 94       	ijmp

00000728 <memcpy>:
 728:	fb 01       	movw	r30, r22
 72a:	dc 01       	movw	r26, r24
 72c:	02 c0       	rjmp	.+4      	; 0x732 <memcpy+0xa>
 72e:	01 90       	ld	r0, Z+
 730:	0d 92       	st	X+, r0
 732:	41 50       	subi	r20, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	d8 f7       	brcc	.-10     	; 0x72e <memcpy+0x6>
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
